const [DataInterface] = (function() {
	"use strict";

	/**
	 * Single object that manages how UI elements interact with content scripts and persistant data.
	 * Converts all message passing into asynchronous function calls (outgoing) and listeners (incoming).
	 * @class
	 **/
	const DataInterface = function() {
		this.monitor = new Monitor();
	};

	/**
	 * @constant {Object} Description for 'age' targeting type.
	 **/
	const TARGET_AGE = {
		"key": "Age",
		"label": "Age",
		"hasValues": true,
	};

	/**
	 * @constant {Object} Description for 'gender' targeting type.
	 **/
	const TARGET_GENDER = {
		"key": "Gender",
		"label": "Gender",
		"hasValues": true,
	};

	/**
	 * @constant {Object} Description for 'region', 'city', or 'state' targeting type.
	 **/
	const TARGET_LOCATION = {
		"key": "Location",
		"label": "Locations",
		"hasValues": true,
	};

	/**
	 * @constant {Object} Description for 'retargeting' targeting type.
	 **/
	const TARGET_RETARGETING = {
		"key": "Retargeting",
		"label": "Similarity to an audience profile",
		"hasValues": false,
	};

	/**
	 * @constant {Object} Description for 'interest' targeting type.
	 **/
	const TARGET_INTEREST = {
		"key": "Interest",
		"label": "Interests",
		"hasValues": true,
	};

	/**
	 * @constant {Object} Description for 'segment' targeting type.
	 **/
	const TARGET_SEGMENT = {
		"key": "Segment",
		"label": "Advertiser categories",
		"hasValues": true,
	};

	/**
	 * @constant {Object} Description for 'lanuage' targeting type.
	 **/
	const TARGET_LANGUAGE = {
		"key": "Language",
		"label": "Languages",
		"hasValues": true,
	};

	/**
	 * @constant {Object} Description for 'like' targeting type.
	 **/
	const TARGET_LIKE = {
		"key": "Like",
		"label": "Activities on Facebook",
		"hasValues": false,
	};

	/**
	 * @constant {Object} Description for 'list' targeting type.
	 **/
	const TARGET_LIST = {
		"key": "List",
		"label": "Inclusion in a contact list",
		"hasValues": false,
	};

	/**
	 * @constant {Object} Description for 'website' targeting type.
	 **/
	const TARGET_WEBSITE = {
		"key": "Website",
		"label": "Browsing history or app usage",
		"hasValues": false,
	};

	/**
	 * @constant {Object} Description for 'agency' targeting type.
	 **/
	const TARGET_AGENCY = {
		"key": "Agency",
		"label": "Data provided by external agencies",
		"hasValues": true,
	};

	/**
	 * @constant {Object} Description other unknown targeting type.
	 **/
	const TARGET_UNKNOWN = {
		"key": "Unknown",
		"label": "Unseen reason",
		"hasValues": false,
	};

	/**
	 * Sanitize target types
	 * @param {string} targetType - Targeting type generated by parser.
	 * @returns {string|null} Sanitized targeting type or null if no match is found.
	 **/
	const sanitizeTargetType = (targetType) => {
		if (targetType === "Age") {
			return TARGET_AGE;
		}
		if (targetType === "Gender") {
			return TARGET_GENDER;
		}
		if (targetType === "Region" || targetType === "City" || targetType === "State") {
			return TARGET_LOCATION;
		}
		if (targetType === "Retargeting") {
			return TARGET_RETARGETING;
		}
		if (targetType === "Interest") {
			return TARGET_INTEREST;
		}
		if (targetType === "Segment") {
			return TARGET_SEGMENT;
		}
		if (targetType === "Language") {
			return TARGET_LANGUAGE;
		}
		if (targetType === "Like") {
			return TARGET_LIKE;
		}
		if (targetType === "List") {
			return TARGET_LIST;
		}
		if (targetType === "Website") {
			return TARGET_WEBSITE;
		}
		if (targetType === "Agency") {
			return TARGET_AGENCY;
		}
		return TARGET_UNKNOWN;
	};

	const sanitizeTargetValue = (targetValue) => {
		if (targetValue && targetValue.length >= 1) {
			if (targetValue.substring(targetValue.length - 1, targetValue.length) === ".") {
				return targetValue.substring(0, targetValue.length - 1);
			}
		}
		return targetValue;
	};

	DataInterface.prototype.getAllTargetTypes = function() {
		return [
			TARGET_AGE,
			TARGET_GENDER,
			TARGET_LOCATION,
			TARGET_RETARGETING,
			TARGET_INTEREST,
			TARGET_SEGMENT,
			TARGET_LANGUAGE,
			TARGET_LIKE,
			TARGET_LIST,
			TARGET_WEBSITE,
			TARGET_AGENCY,
		];
	};

	DataInterface.prototype.computePublicTargetStats = function() {
		return new Promise(resolve => {
			this.monitor.ENTER("computePublicTargetStats");
			fetch("fbpac-targets.json").then(response => {
				return response.json();
			}).then(json => {
				this.monitor.RESULTS(json);
				this.monitor.EXIT("computePublicTargetStats");
				resolve(json);
			});
		});
	};

	DataInterface.prototype.computeYourTargetStats = function() {
		return new Promise(resolve => {
			this.monitor.ENTER("computeYourTargetStats");
			this.getAllAds().then(results => {
				const allAds = results.allAds;
				const allStats = {};
				this.getAllTargetTypes().forEach(sectionTargetType => {
					const allTargetValueList = [];
					const allTargetValueSet = new Set();
					allAds.forEach(singleAd => {
						if (singleAd.targets) {
							const targetValueSet = new Set();
							let targetCityValue = null;
							let targetStateValue = null;
							singleAd.targets.forEach(d => {
								const targetType = sanitizeTargetType(d.target);
								if (targetType.key === sectionTargetType.key) {
									const targetValue = sanitizeTargetValue(d.segment);
									if (targetValue !== undefined) {
										if (d.target === "City") {
											targetCityValue = targetValue;
										}
										else if (d.target === "State") {
											targetStateValue = targetValue;
										}
										else {
											targetValueSet.add(targetValue);
										}
									}
								}
							});
							if (targetCityValue !== null && targetStateValue !== null) {
								targetValueSet.add(`${targetCityValue}, ${targetStateValue}`);
							}
							else {
								if (targetCityValue !== null) {
									targetValueSet.add(targetCityValue);
								}
								if (targetStateValue !== null) {
									targetValueSet.add(targetStateValue);
								}
							}
							if (targetValueSet.size > 0) {
								allTargetValueList.push(targetValueSet);
								targetValueSet.forEach(d => allTargetValueSet.add(d));
							}
						}
					});
					const stats = {
						"adCount": allAds.length,
						"typeCount": allTargetValueList.length,
						"targetValues": Array.from(allTargetValueSet).sort(),
					};
					allStats[sectionTargetType.key] = stats;
				});
				this.monitor.RESULTS(allStats);
				this.monitor.EXIT("computeYourTargetStats");
				resolve(allStats);
			});
		});
	};

	DataInterface.prototype.computeTopAdvertisersIndex = function() {
		return new Promise(resolve => {
			this.monitor.ENTER("computeTopAdvertisersIndex");
			fetch("tables/index.json").then(response => {
				return response.json();
			}).then(json => {
				this.monitor.RESULTS(json);
				this.monitor.EXIT("computeTopAdvertisersIndex");
				resolve(json);
			});
		});
	};

	DataInterface.prototype.computeTopAdvertisersTable = function(key) {
		return new Promise(resolve => {
			this.monitor.ENTER("computeTopAdvertisersTable");
			fetch(`tables/${key}.tsv`).then(response => {
				return response.text();
			}).then(text => {
				const data = text.split("\n").filter(row => row.length > 0).map(row => row.split("\t"));
				this.monitor.RESULTS(data);
				this.monitor.EXIT("computeTopAdvertisersTable");
				resolve(data);
			});
		});
	};

	DataInterface.prototype.isIncognito = function() {
		return Promise.resolve(true);
	};

	DataInterface.prototype.onDatabaseEvents = function() {};

	return [DataInterface];
})();
